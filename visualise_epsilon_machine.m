function visualise_epsilon_machine(dot_file, precision, linewidth, pic_size)
%________________________________________________________________________________
% visualise_epsilon_machine
%   generate a visulisation of epsilon machine, please see examples in the
%   fold "epsilon_machine_examples".
%------------------------------------------------------------------------------
%---INPUTS:
%   dot_file,  the original dot file generated by CSSR.
%   precision, the significant decimal digits.
%   linewidth, the width of an edge in the graph.
%   pic_size,  the size of the new epsilon machine.
%-------------------------------------------------------------------------------
% This function is written by Haohua Li, 2020. 
% Visit <https://github.com/randoruf/CSSR-Matlab>
%-------------------------------------------------------------------------------
% This program is free software: you can redistribute it and/or modify it under
% the terms of the GNU General Public License as published by the Free Software
% Foundation, either version 3 of the License, or (at your option) any later
% version.
%
% This program is distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
% FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
% details.
%
% You should have received a copy of the GNU General Public License along with
% this program. If not, see <http://www.gnu.org/licenses/>.
%________________________________________________________________________________


% specify the file name 
[filepath, filename, ext] = fileparts(dot_file); 
out_file = fullfile(filepath, strcat(filename, '(2)', ext)); 

% open the file handle
fid  = fopen(dot_file, 'r');
fp = fopen(out_file, 'w'); 

% valid parameters ??
if nargin ~= 1 && nargin ~= 4
    error('Invalid parameters, visit <https://github.com/randoruf/CSSR-Matlab> for more help.')
end 

% set default parameters
if nargin == 1
    precision = 2;          % the precision of probability 
    linewidth = [0.5, 5];   % line thickness range     
    pic_size  = [12, 17];   % the size of the output picture 
end 

% duplicate the first 5 lines 
for i = 1:5
    tline = fgetl(fid);
    if i == 2
       % make the dot file larger. 
       s = strcat('size = "', num2str(pic_size(1)), ',', num2str(pic_size(2)), '";\n');
       fprintf(fp, s);
    else
       fprintf(fp, '%s\n', tline);
    end
end

% change the line 6 
fgetl(fid); 
fprintf(fp, '%s\n', 'edge [fontsize = 24, colorscheme="spectral8"];'); 

% read until the end of file
tline = fgetl(fid);  % read the line 7
while ~feof(fid)
    % find the probability index 
    s = strfind(tline, 'label = "') + length('label = ') + 1;
    e = strfind(tline, '"];') - 1;
    % exception....
    if isempty(s) || isempty(e)
        break
    end
    
    % convert the probability to a float type and then round to with 2
    % digis
    float_init = strfind(tline(s:e), ': ') + length(tline(1:s))+ 1; 
    p = sscanf(tline(float_init:e),'%lf'); 
    p = round(p, precision); 
    
    % map the old range to the new range (according to linewidth configuration) 
    lw = (p - 0)*(linewidth(2) - linewidth(1)) +  linewidth(1);
    color = 9 - round((p - 0)*(8 - 1) + 1); 
        
    % with linewidth and color 
    str_format = ['%s%.', int2str(precision), 'f"%s%.1f%s%d%s\n']; 
    tempstr = sprintf(str_format, tline(1:float_init-1), p, ', penwidth=', lw, ', color=', color, ' ];');    
    fprintf(fp, '%s', tempstr); 
    
    % read the next new line....
    tline = fgetl(fid);
end

% finishing all the jobs....
fprintf(fp, '}\n'); 
fclose(fid); 
fclose(fp); 

end